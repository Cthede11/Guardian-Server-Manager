name: Production Deployment Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  RUST_VERSION: '1.75.0'
  NODE_VERSION: '20'

jobs:
  # Security and Quality Checks
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cargo audit
      
      - name: Install cargo-deny
        run: cargo install cargo-deny
      
      - name: Run cargo-deny
        run: cargo deny check

  # Code Quality and Testing
  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
      
      - name: Install clippy
        run: rustup component add clippy
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Install rustfmt
        run: rustup component add rustfmt
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Run test coverage
        run: cargo tarpaulin --out Html --output-dir coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/tarpaulin-report.html

  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: guardian_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run unit tests
        run: cargo test --verbose
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/guardian_test
      
      - name: Run integration tests
        run: cargo test --test integration_tests --verbose
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/guardian_test
      
      - name: Run performance tests
        run: cargo test --test performance_tests --verbose
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/guardian_test

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: guardian-ui/package-lock.json
      
      - name: Install dependencies
        working-directory: guardian-ui
        run: npm ci
      
      - name: Run linting
        working-directory: guardian-ui
        run: npm run lint
      
      - name: Run type checking
        working-directory: guardian-ui
        run: npm run type-check
      
      - name: Run unit tests
        working-directory: guardian-ui
        run: npm run test:unit
      
      - name: Run integration tests
        working-directory: guardian-ui
        run: npm run test:integration
      
      - name: Build application
        working-directory: guardian-ui
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: guardian-ui/dist

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security-audit, quality-checks, backend-tests, frontend-tests, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
      
      - name: Build backend
        run: cargo build --release
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: guardian-ui/package-lock.json
      
      - name: Install frontend dependencies
        working-directory: guardian-ui
        run: npm ci
      
      - name: Build frontend
        working-directory: guardian-ui
        run: npm run build
      
      - name: Create release package
        run: |
          mkdir -p release
          cp target/release/hostd release/
          cp -r guardian-ui/dist release/frontend
          cp -r data release/
          cp -r config release/
          tar -czf guardian-server-manager.tar.gz release/
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: guardian-server-manager
          path: guardian-server-manager.tar.gz

  # Docker Build
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: |
            guardian/server-manager:latest
            guardian/server-manager:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            guardian/server-manager-frontend:latest
            guardian/server-manager-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # This could be Kubernetes, Docker Swarm, or cloud deployment

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # This could be Kubernetes, Docker Swarm, or cloud deployment
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke tests to verify deployment
      
      - name: Notify deployment success
        run: |
          echo "Production deployment successful!"
          # Add notification logic (Slack, email, etc.)

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run performance tests
        run: |
          k6 run tests/performance/load-test.js
          k6 run tests/performance/stress-test.js
          k6 run tests/performance/spike-test.js

  # Security Testing
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install OWASP ZAP
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jdk
          wget https://github.com/zaproxy/zaproxy/releases/download/v2.12.0/ZAP_2.12.0_Linux.tar.gz
          tar -xzf ZAP_2.12.0_Linux.tar.gz
      
      - name: Run security tests
        run: |
          echo "Running security tests..."
          # Add security testing logic here

  # Monitoring and Alerting
  monitoring-setup:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    steps:
      - name: Setup monitoring
        run: |
          echo "Setting up monitoring and alerting..."
          # Add monitoring setup logic here
      
      - name: Configure alerts
        run: |
          echo "Configuring alerts..."
          # Add alert configuration logic here
