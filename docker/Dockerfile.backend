# Multi-stage build for production
FROM rust:1.75-slim as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libsqlite3-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy manifests
COPY Cargo.toml Cargo.lock ./
COPY hostd/Cargo.toml ./hostd/
COPY gpu-worker/Cargo.toml ./gpu-worker/

# Build dependencies
RUN cargo build --release --bin hostd

# Copy source code
COPY . .

# Build the application
RUN cargo build --release --bin hostd

# Production stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libssl3 \
    libsqlite3-0 \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN useradd -r -s /bin/false guardian

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/target/release/hostd /app/hostd

# Copy GPU worker
COPY --from=builder /app/target/release/gpu-worker /app/gpu-worker

# Create data directory
RUN mkdir -p /app/data && chown -R guardian:guardian /app

# Switch to non-root user
USER guardian

# Expose port
EXPOSE 52100

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:52100/healthz || exit 1

# Run the application
CMD ["./hostd"]
